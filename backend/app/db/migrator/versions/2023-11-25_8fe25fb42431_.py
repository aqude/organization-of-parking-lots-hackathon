"""empty message

<<<<<<<< HEAD:backend/app/db/migrator/versions/2023-11-25_43232c86fe88_.py
Revision ID: 43232c86fe88
Revises: 
Create Date: 2023-11-25 16:28:47.915259
========
Revision ID: 8fe25fb42431
Revises: 
Create Date: 2023-11-25 15:44:00.353681
>>>>>>>> origin/backend_refactor:backend/app/db/migrator/versions/2023-11-25_8fe25fb42431_.py

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
<<<<<<<< HEAD:backend/app/db/migrator/versions/2023-11-25_43232c86fe88_.py
revision = '43232c86fe88'
========
revision = '8fe25fb42431'
>>>>>>>> origin/backend_refactor:backend/app/db/migrator/versions/2023-11-25_8fe25fb42431_.py
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Cities',
    sa.Column('city_name', sa.TEXT(), nullable=False),
    sa.Column('city_id', sa.INTEGER(), nullable=False),
    sa.PrimaryKeyConstraint('city_name', 'city_id', name=op.f('pk__Cities')),
    sa.UniqueConstraint('city_id', name=op.f('uq__Cities__city_id')),
    sa.UniqueConstraint('city_name', name=op.f('uq__Cities__city_name'))
    )
    op.create_table('user',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
<<<<<<<< HEAD:backend/app/db/migrator/versions/2023-11-25_43232c86fe88_.py
    sa.Column('email', sa.TEXT(), nullable=False),
========
    sa.Column('first_name', sa.TEXT(), nullable=False),
    sa.Column('second_name', sa.TEXT(), nullable=False),
    sa.Column('last_name', sa.TEXT(), nullable=True),
>>>>>>>> origin/backend_refactor:backend/app/db/migrator/versions/2023-11-25_8fe25fb42431_.py
    sa.Column('password', sa.TEXT(), nullable=False),
    sa.Column('first_name', sa.TEXT(), nullable=True),
    sa.Column('last_name', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__user')),
    sa.UniqueConstraint('id', name=op.f('uq__user__id'))
    )
<<<<<<<< HEAD:backend/app/db/migrator/versions/2023-11-25_43232c86fe88_.py
    op.create_index(op.f('ix__user__email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix__user__password'), 'user', ['password'], unique=False)
========
    op.create_index(op.f('ix__user__first_name'), 'user', ['first_name'], unique=False)
    op.create_index(op.f('ix__user__last_name'), 'user', ['last_name'], unique=False)
    op.create_index(op.f('ix__user__password'), 'user', ['password'], unique=False)
    op.create_index(op.f('ix__user__second_name'), 'user', ['second_name'], unique=False)
>>>>>>>> origin/backend_refactor:backend/app/db/migrator/versions/2023-11-25_8fe25fb42431_.py
    op.create_table('Places',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('City_id', sa.INTEGER(), nullable=False),
    sa.Column('parking_longitude', sa.DECIMAL(), nullable=False),
    sa.Column('parking_latitude', sa.DECIMAL(), nullable=False),
    sa.Column('number_of_places', sa.INTEGER(), nullable=False),
    sa.Column('price_for_hour', sa.DECIMAL(), nullable=False),
    sa.Column('type_of_parking', sa.TEXT(), nullable=False),
    sa.Column('street_name', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['City_id'], ['Cities.city_id'], name=op.f('fk__Places__City_id__Cities')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__Places')),
    sa.UniqueConstraint('id', name=op.f('uq__Places__id'))
    )
    op.create_index(op.f('ix__Places__parking_latitude'), 'Places', ['parking_latitude'], unique=False)
    op.create_index(op.f('ix__Places__parking_longitude'), 'Places', ['parking_longitude'], unique=False)
    op.create_table('payment',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('payment_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('amount', sa.DECIMAL(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('is_paid', sa.BOOLEAN(), nullable=True),
    sa.Column('is_confirmed', sa.BOOLEAN(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk__payment__user_id__user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__payment')),
    sa.UniqueConstraint('id', name=op.f('uq__payment__id'))
    )
    op.create_index(op.f('ix__payment__payment_id'), 'payment', ['payment_id'], unique=True)
    op.create_table('payment_method',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('method_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk__payment_method__user_id__user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__payment_method')),
    sa.UniqueConstraint('id', name=op.f('uq__payment_method__id'))
    )
    op.create_index(op.f('ix__payment_method__title'), 'payment_method', ['title'], unique=True)
    op.create_table('reservations',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('parking_id', sa.INTEGER(), nullable=False),
    sa.Column('payment_method_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('start_time', sa.TIMESTAMP(), nullable=False),
    sa.Column('end_time', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payment_method.id'], name=op.f('fk__reservations__payment_method_id__payment_method'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk__reservations__user_id__user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__reservations')),
    sa.UniqueConstraint('id', name=op.f('uq__reservations__id')),
    sa.UniqueConstraint('parking_id', name=op.f('uq__reservations__parking_id')),
    sa.UniqueConstraint('user_id', name=op.f('uq__reservations__user_id'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reservations')
    op.drop_index(op.f('ix__payment_method__title'), table_name='payment_method')
    op.drop_table('payment_method')
    op.drop_index(op.f('ix__payment__payment_id'), table_name='payment')
    op.drop_table('payment')
    op.drop_index(op.f('ix__Places__parking_longitude'), table_name='Places')
    op.drop_index(op.f('ix__Places__parking_latitude'), table_name='Places')
    op.drop_table('Places')
<<<<<<<< HEAD:backend/app/db/migrator/versions/2023-11-25_43232c86fe88_.py
    op.drop_index(op.f('ix__user__password'), table_name='user')
    op.drop_index(op.f('ix__user__email'), table_name='user')
========
    op.drop_index(op.f('ix__user__second_name'), table_name='user')
    op.drop_index(op.f('ix__user__password'), table_name='user')
    op.drop_index(op.f('ix__user__last_name'), table_name='user')
    op.drop_index(op.f('ix__user__first_name'), table_name='user')
>>>>>>>> origin/backend_refactor:backend/app/db/migrator/versions/2023-11-25_8fe25fb42431_.py
    op.drop_table('user')
    op.drop_table('Cities')
    # ### end Alembic commands ###
