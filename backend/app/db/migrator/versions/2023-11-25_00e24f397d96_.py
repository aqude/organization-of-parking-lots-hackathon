"""empty message

Revision ID: 00e24f397d96
Revises: 
Create Date: 2023-11-25 14:05:41.316602

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '00e24f397d96'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Cities',
    sa.Column('city_name', sa.TEXT(), nullable=False),
    sa.Column('city_id', sa.INTEGER(), nullable=False),
    sa.PrimaryKeyConstraint('city_name', 'city_id', name=op.f('pk__Cities')),
    sa.UniqueConstraint('city_id', name=op.f('uq__Cities__city_id')),
    sa.UniqueConstraint('city_name', name=op.f('uq__Cities__city_name'))
    )
    op.create_table('user',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('username', sa.TEXT(), nullable=False),
    sa.Column('password', sa.TEXT(), nullable=False),
    sa.Column('email', sa.TEXT(), nullable=True),
    sa.Column('balance', sa.DECIMAL(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__user')),
    sa.UniqueConstraint('email', name=op.f('uq__user__email')),
    sa.UniqueConstraint('id', name=op.f('uq__user__id'))
    )
    op.create_index(op.f('ix__user__password'), 'user', ['password'], unique=False)
    op.create_index(op.f('ix__user__username'), 'user', ['username'], unique=True)
    op.create_table('Places',
    sa.Column('City', sa.TEXT(), nullable=False),
    sa.Column('City_id', sa.INTEGER(), nullable=False),
    sa.Column('parking_longitude', sa.FLOAT(), nullable=False),
    sa.Column('parking_latitude', sa.FLOAT(), nullable=False),
    sa.Column('number_of_place', sa.INTEGER(), nullable=False),
    sa.Column('price_for_hour', sa.DECIMAL(), nullable=False),
    sa.Column('type_of_parking', sa.TEXT(), nullable=False),
    sa.Column('status', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['City_id'], ['Cities.city_id'], name=op.f('fk__Places__City_id__Cities')),
    sa.PrimaryKeyConstraint('City', 'City_id', name=op.f('pk__Places')),
    postgresql_partition_by='LIST ("City_id")'
    )
    op.create_table('payment',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('payment_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('amount', sa.DECIMAL(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('is_paid', sa.BOOLEAN(), nullable=True),
    sa.Column('is_confirmed', sa.BOOLEAN(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk__payment__user_id__user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__payment')),
    sa.UniqueConstraint('id', name=op.f('uq__payment__id'))
    )
    op.create_index(op.f('ix__payment__payment_id'), 'payment', ['payment_id'], unique=True)
    op.create_table('payment_method',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('method_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk__payment_method__user_id__user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__payment_method')),
    sa.UniqueConstraint('id', name=op.f('uq__payment_method__id'))
    )
    op.create_index(op.f('ix__payment_method__title'), 'payment_method', ['title'], unique=True)
    op.create_table('reservations',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('dt_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('dt_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('place_id', sa.INTEGER(), nullable=False),
    sa.Column('occupied_from', sa.TIMESTAMP(), nullable=False),
    sa.Column('occupied_to', sa.TIMESTAMP(), nullable=False),
    sa.Column('payment_method_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('payment_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['payment_id'], ['payment.id'], name=op.f('fk__reservations__payment_id__payment'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payment_method.id'], name=op.f('fk__reservations__payment_method_id__payment_method'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk__reservations__user_id__user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__reservations')),
    sa.UniqueConstraint('id', name=op.f('uq__reservations__id')),
    sa.UniqueConstraint('place_id', name=op.f('uq__reservations__place_id')),
    sa.UniqueConstraint('user_id', name=op.f('uq__reservations__user_id'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reservations')
    op.drop_index(op.f('ix__payment_method__title'), table_name='payment_method')
    op.drop_table('payment_method')
    op.drop_index(op.f('ix__payment__payment_id'), table_name='payment')
    op.drop_table('payment')
    op.drop_table('Places')
    op.drop_index(op.f('ix__user__username'), table_name='user')
    op.drop_index(op.f('ix__user__password'), table_name='user')
    op.drop_table('user')
    op.drop_table('Cities')
    # ### end Alembic commands ###
